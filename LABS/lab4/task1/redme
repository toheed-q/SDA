# Observer Design Pattern - Java Implementation

## Abstract `Observer` Class

### Purpose
This class serves as the blueprint for all concrete observer classes. Every observer must implement the `update()` method, which will be triggered when the subject's state changes.

### Fields
- **protected Subject subject**: The observer holds a reference to the subject it is observing.

### Method
- **public abstract void update()**: A method that concrete observer classes must implement, defining what each observer does when it is notified of a state change.

---

## Concrete `BinaryObserver` Class

### Purpose
This class represents one type of observer that will convert the subject’s state into a **binary string**.

### Constructor
- The observer attaches itself to the subject and registers to receive updates whenever the state of the subject changes.

### Method
- **update()**: Converts the subject’s state to a binary string using `Integer.toBinaryString()` and prints it to the console.

---

## Concrete `HexaObserver` Class

### Purpose
This observer converts the subject's state into a **hexadecimal string**.

### Method
- **update()**: Converts the subject’s state to a hexadecimal string using `Integer.toHexString()` and prints it in uppercase.

---

## Concrete `OctalObserver` Class

### Purpose
This observer converts the subject's state into an **octal string**.

### Method
- **update()**: Converts the subject’s state to an octal string using `Integer.toOctalString()` and prints it to the console.

---

## `Subject` Class

### Purpose
The **Subject** class manages its state and keeps track of its observers. When the state changes, the subject notifies all attached observers.

### Fields
- **private List<Observer> observers**: This is a list of all observers attached to the subject.
- **private int state**: This holds the current state of the subject.

### Methods
- **getState()**: Returns the current state of the subject.
- **setState(int state)**: Sets the state and notifies all observers of the state change. After updating the state, it calls `notifyAllObservers()`.
- **attach(Observer observer)**: Adds an observer to the list of observers so it can be notified of state changes.
- **notifyAllObservers()**: Iterates through the list of observers and calls their `update()` method, notifying them that the state has changed.

---

## `ObserverPatternDemo` (Main Class)

### Purpose
This is the demo class that ties everything together. It creates a **Subject**, attaches three different observers (`HexaObserver`, `OctalObserver`, `BinaryObserver`), and simulates state changes.

### Flow

#### 1. **Subject Creation**
A new `Subject` instance is created.

#### 2. **Attaching Observers**
- `new HexaObserver(subject)`: A hexadecimal observer is attached to the subject.
- `new OctalObserver(subject)`: An octal observer is attached.
- `new BinaryObserver(subject)`: A binary observer is attached.

#### 3. **First State Change**
The state of the subject is set to `15` using `subject.setState(15)`. This change triggers the notification to all attached observers. Each observer reacts by converting the state `15` into its respective format:
- **Hexadecimal**: F
- **Octal**: 17
- **Binary**: 1111

#### 4. **Second State Change**
The state is changed to `10` using `subject.setState(10)`. The observers are again notified, and each converts `10` to its respective format:
- **Hexadecimal**: A
- **Octal**: 12
- **Binary**: 1010

